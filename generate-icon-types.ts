/* eslint-disable no-console */
/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable import/no-extraneous-dependencies */
import fs from "node:fs";
import path from "node:path";

const ICONS_DIR_PATH = "assets/icons";
const ICONS_TYPES_PATH = "__generated__/auto-generated-icon-name.d.ts";

export function generateIconTypes({
  iconsDir = ICONS_DIR_PATH,
  outputFile = ICONS_TYPES_PATH,
} = {}) {
  // 1. Resolve paths
  const resolvedIconsDir = path.resolve(process.cwd(), iconsDir);
  const resolvedOutputFile = path.resolve(process.cwd(), outputFile);

  // 2. Read all the files in the icons directory
  let files: string[];
  try {
    files = fs.readdirSync(resolvedIconsDir);
  } catch (error) {
    console.warn(
      `[vite-plugin-generate-icon-types] Could not read icons directory: ${resolvedIconsDir}`
    );
    return;
  }

  // 3. Filter out non-TSX or TS files (or whatever your icons are)
  const iconNames = files
    .filter((file) => file.endsWith(".svg"))
    // Remove extension, e.g. "Home.tsx" -> "Home"
    .map((file) => file.replace(/\.svg$/, ""));

  if (!iconNames.length) {
    console.warn(
      "[vite-plugin-generate-icon-types] No icon files found in directory."
    );
    return;
  }

  // 4. Build the union type string
  // e.g. `export type IconName = "Arrow" | "Home" | "Settings";`
  const typeDefinition =
    // biome-ignore lint/style/useTemplate: <explanation>
    "// AUTO-GENERATED by vite-plugin-generate-icon-types\n" +
    "// Do not edit manually.\n\n" +
    `export type IconName = ${iconNames
      .map((name) => `"${name}"`)
      .join(" | ")};\n`;

  // 5. Write the type file
  try {
    fs.mkdirSync(path.dirname(resolvedOutputFile), { recursive: true });
    fs.writeFileSync(resolvedOutputFile, typeDefinition, {
      encoding: "utf-8",
    });
    console.log(
      `[vite-plugin-generate-icon-types] IconName type definition generated at: ${resolvedOutputFile}`
    );
  } catch (error) {
    console.error(
      `[vite-plugin-generate-icon-types] Could not write icon type definition: ${error}`
    );
  }
}

/**
 * A Vite plugin that scans the icons directory,
 * and generates a .d.ts file exporting `IconName` as a union type.
 */
export default function getIconTypesPlugin({
  iconsDir = ICONS_DIR_PATH,
  outputFile = ICONS_TYPES_PATH,
} = {}) {
  return {
    name: "vite-plugin-generate-icon-types",
    buildStart() {
      generateIconTypes({ iconsDir, outputFile });
    },
  };
}
